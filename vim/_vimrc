" vim uses bash best, not fish
if &shell =~# 'fish$'
    set shell=sh
elseif &shell =~# 'zsf$'
    set shell=sh
endif

call plug#begin('~/.vim/plugged')
Plug 'https://github.com/jiangmiao/auto-pairs'
Plug 'https://github.com/morhetz/gruvbox'
Plug 'https://github.com/scrooloose/nerdcommenter'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/stumash/vim-snippets'
Plug 'https://github.com/bling/vim-airline'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/justinmk/vim-sneak'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/jceb/emmet.snippets'
Plug 'https://github.com/tommcdo/vim-exchange'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/junegunn/fzf.vim.git'
Plug 'https://github.com/sheerun/vim-polyglot.git'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/neoclide/coc.nvim.git'
Plug 'https://github.com/unblevable/quick-scope'
call plug#end()

"""" AIRLINE begin
" always show status bar
set laststatus=2
" unicode symbols
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'
" airline colorscheme/theme
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
"""" AIRLINE end

"""" ULTISNIPS begin
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/bundle/my-ulti-snippets']
let g:UltiSnipsSnippetsDir=$HOME.'/.vim/bundle/my-ulti-snippets'
"""" ULTISNIPS end

"""" LEADER
nnoremap <SPACE> <Nop>
let mapleader=" "
"""" LEADER

"""" BUFFERS begin
nnoremap <leader><leader> :b#<CR>
nnoremap <leader>x :bd<CR>
"""" BUFFERS end

"""" JSON begin
nnoremap <leader>json :%!python3 -m json.tool<CR>
vnoremap <leader>json :!python3 -m json.tool<CR>
"""" JSON end

"""" SNEAK begin
" label-mode
let g:sneak#label = 1
" replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
" replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
"""" SNEAK end

"""" DISPLAY SETTINGS begin
set showcmd "show vim commands as they're typed
set number "show line number
set relativenumber "show relative line numbering
set hlsearch " set hlsearch
" set 256 colors available
set t_Co=256
" non-printable character display settings when :set list
set lcs=space:·,tab:»»,eol:↵
hi NonText ctermfg=0 guifg=gray
hi SpecialKey ctermfg=0 guifg=gray
" let lines wrap at the indentation of beginning of the line being wrapped
set breakindent
" colors
set background=dark
colorscheme gruvbox
hi Normal ctermbg=NONE
"""" DISPLAY SETTINGS end

"""" AUTOPAIRS begin
let g:AutoPairsMultilineClose = 0
"""" AUTOPAIRS end

"""" TABLINE begin
set showtabline=1
"""" TABLINE end

"""" FZF begin
set rtp+=~/installed_software/fzf
" open new file
nmap <leader>f :Files<CR>
" find file by contents
nmap <leader>F :Rg<CR>
" find line in current buffer
nmap <leader>/ :BLines<CR>
" choose buffer
nmap <leader>b :Buffers<CR>
"""" FZF end

"""" POLYGLOT begin
let g:csv_no_conceal = 1
"""" POLYGLOT end

"""" FUGITIVE begin
" git add current file
nmap <leader>gaf :Gwrite<CR>
nmap <leader>gs :Gstatus<CR>
"""" FUGITIVE end

"""" SIGNIFY begin
" this line is only in the index, not the HEAD
nmap <leader>G :SignifyToggle<CR>
"" force git gutter to run on all buffers
nmap <leader>gg :SignifyRefresh<CR>
nmap ]g <Plug>(signify-next-hunk)
nmap [g <Plug>(signify-prev-hunk)
"" git undo hunk ()
nmap <leader>gu :SignifyHunkUndo<CR>
"""" SIGNIFY end

""""""" plugin-related settings begin
" let vim detect filetype. needed for some plugins
filetype plugin on
" latex filetype setting
let g:tex_flavor = "latex"
""""""" plugin-related settings end

""""""" search settings begin
" this mapping causes vim to startup with c pressed
nnoremap <esc> <esc>:noh<cr>:<bs><esc>hl
" but neovim doesn't have this issue
""""""" search settings end

""""""" clipboard settings begin
" set <C-c> to copy-to-clipboard in visual mode
vnoremap <C-c> "+y
" ensure that clipboard = the unnamed register
set clipboard=unnamed
""""""" clipboard settings end

"""" <C-m> is 'm'y namespace
noremap <C-m>hls :set hlsearch!<CR>
noremap <C-m>rn :set relativenumber!<CR>
noremap <C-m>ln :set number!<CR>
" show hidden chars
noremap <C-m>hc :set list!<CR>
" turn off syntax highlighting
nmap <C-m>sn :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" reload file
nmap <C-m>rr :bufdo e<CR>
" remove trailing whitespace + tabs to spaces
noremap <C-m>w :call RemoveTrailingWhitespace()<CR>:call TabsToSpaces()<CR>
"""" <C-m is 'm'y namespace

" allow opening buffers even if current has unsaved changes
set hidden

" highlight column 120
set colorcolumn=120

" tab settings
set tabstop=4     "The width of a TAB is set to 4, but is still \lt
set shiftwidth=4  "Indents will have a width of 4
set softtabstop=4 "Sets the number of columns for a TAB
set expandtab     "Expand TABs to spaces
" filetype-specific tab settings
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType javascriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType typescriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=4
" except you can still manually TAB like this:
inoremap <S-Tab> <C-v><Tab>

" :split opens to the right or below
set splitright
set splitbelow

" let % jump to closing tag in html on top of usual functionality
runtime macros/matchit.vim

" code folding settings
set foldmethod=indent
set nofoldenable

" turn on mouse support
set mouse=a

"""" MY FUNCTIONS BEGIN
function RemoveTrailingWhitespace()
    :exe "silent! :%s/\\s\\+\\n/\\r/"
endfunction

function TabsToSpaces()
    :exe "silent! :%s/\\t/    /g"
endfunction
"""" MY FUNCTIONS END

"""" MY VARIABLES BEGIN
let g:no_ocaml_maps=1
let g:csv_delim=','
"""" MY VARIABLES END

"""" MY LEADER MAPPINGS begin
" copy current filename into system clipboard
nmap <leader>% mz:put =expand('%:p')<CR>0v$h<C-c>dd`z
nmap <leader>q :q<CR>
"""" MY LEADER MAPPINGS end

"""" COC begin
" TextEdit might fail if hidden is not set.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [k <Plug>(coc-diagnostic-prev)
nmap <silent> ]k <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> <leader>kd <Plug>(coc-definition)
nmap <silent> <leader>kt <Plug>(coc-type-definition)
nmap <silent> <leader>ki <Plug>(coc-implementation)
nmap <silent> <leader>kv <Plug>(coc-references)

function! ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
nmap <leader>kh :call ShowDocumentation()<CR>

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Remap for rename current word
nmap <leader>kr <Plug>(coc-rename)
vmap <leader>kr <Plug>(coc-rename)
" Remap for format selected region
xmap <leader>kf  <Plug>(coc-format-selected)
nmap <leader>kf  <Plug>(coc-format-selected)
"""" COC end
