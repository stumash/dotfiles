" vim uses bash best, not fish
if &shell =~# 'fish$'
    set shell=sh
elseif &shell =~# 'zsf$'
    set shell=sh
endif

set completeopt=longest,menuone

" utf8
set encoding=utf-8

call plug#begin('~/.vim/plugged')
Plug 'https://github.com/jiangmiao/auto-pairs'
Plug 'https://github.com/morhetz/gruvbox'
Plug 'https://github.com/scrooloose/nerdcommenter'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/stumash/vim-snippets'
Plug 'https://github.com/bling/vim-airline'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/justinmk/vim-sneak'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/jceb/emmet.snippets'
Plug 'https://github.com/tommcdo/vim-exchange'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/junegunn/fzf.vim.git'
Plug 'https://github.com/sheerun/vim-polyglot.git'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/neoclide/coc.nvim.git', { 'branch': 'release' }
Plug 'https://github.com/unblevable/quick-scope'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'https://github.com/stumash/vim-base64'
"Plug 'https://github.com/ryanoasis/vim-devicons'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'frazrepo/vim-rainbow'
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'norcalli/nvim-colorizer.lua'
call plug#end()

"""" LEADER:
let mapleader=" "
nmap <C-Space> <Space>


"""" DISPLAY SETTINGS
set showcmd "show vim commands as they're typed
set number "show line number
set relativenumber "show relative line numbering
set hlsearch " set hlsearch
" set 256 colors available
set t_Co=256
set termguicolors " moar colors
" non-printable character display settings when :set list
set lcs=space:·,tab:»»,eol:↵
hi NonText ctermfg=0 guifg=black
hi SpecialKey ctermfg=0 guifg=black
" let lines wrap at the indentation of beginning of the line being wrapped
set breakindent
" colors
let g:gruvbox_contrast_dark = "hard"
colorscheme gruvbox
hi Normal ctermbg=NONE
" highlight column 120
set colorcolumn=120


"""" COLORIZER: show the color of hex and rgb color values
lua require 'colorizer'.setup()

"""" WHICHKEY: show hints when you hit leader
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>


"""" ROOTER: set the cwd to the project root automatically
let g:rooter_patterns = ['.git', 'Cargo.toml', 'package.json', 'Makefile']


"""" RAINBOW: nested paren pairs are different colors
au FileType c,cpp,objc,objcpp,python,rust,scala,java,javascript,js,jsx,typescript,ts,tsx,sh,bash,vim
    \ call rainbow#load()


"""" PRETTIER: autoformatter for js family of languages
" line length 120
let g:prettier#config#print_width = 120
" Allow auto formatting for files without "@format" or "@prettier" tag
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0
" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0


"""" AIRLINE: fancy status line
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#fugitiveline#enabled = 0
let g:airline#extensions#branch#enabled = 0
" always show status bar
set laststatus=2
" unicode symbols
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='+'
" airline colorscheme/theme
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1


"""" ULTISNIPS: fancy snippet completion/expansion
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/plugged/vim-snippets/UltiSnips']
let g:UltiSnipsSnippetsDir=$HOME.'/.vim/bundle/vim-snippets/UltiSnips'


"""" JSON: automatically format json
nnoremap <leader>json :%!python3 -m json.tool<CR>
vnoremap <leader>json :!python3 -m json.tool<CR>


"""" SNEAK: quicksearch for single or two characters with f,t, and s
" label-mode
let g:sneak#label = 1
" replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
" replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T


"""" CURSOR:
" highlight current row
set cursorline


"""" AUTOPAIRS: auto insert closing paren,brace,...
let g:AutoPairsMultilineClose = 0


"""" FZF: fuzzy finder
set rtp+=~/installed_software/fzf
" open new file
nnoremap <leader>f :Files<CR>
" find file by contents
nnoremap <leader>F :Rg<CR>
" find line in current buffer
nnoremap <leader>/ :BLines<CR>
" find line in open buffers
nnoremap <leader>? :Lines<CR>
" choose buffer
nnoremap <leader>b :Buffers<CR>


"""" POLYGLOT: bundle of language plugins
let g:csv_no_conceal = 1


"""" FUGITIVE: git, in general
" git add current file
nnoremap <leader>ga :Gwrite<CR>
" git checkout current file (from index)
nnoremap <leader>gr :Gread<CR>
" git status
nnoremap <leader>gs :Gstatus<CR>
" git blame
nnoremap <leader>gb :G blame<CR>
" git rm and delete current buffer/file
nnoremap <leader>gD :GDelete<CR>
" view the current file on github
nnoremap <leader>gB :GBrowse<CR>
" open the diff view
nnoremap <leader>gd :Gdiff<CR>
" in diff view, stage/add hunk
nnoremap <leader>gha :diffput<CR>
" in diff view, checkout/read hunk
nnoremap <leader>ghr :diffget<CR>


"""" SIGNIFY: git diff indicators in the gutter
" toggle diff base from HEAD to master or anything else
nnoremap <leader>gm :call SignifyMaster()<CR>
let g:signify_diff_base = "HEAD"
function SignifyMaster()
    if g:signify_diff_base ==# "master"
        let g:signify_diff_base = "HEAD"
    elseif g:signify_diff_base ==# "HEAD"
        let g:signify_diff_base = "master"
    endif
    let g:signify_vcs_cmds.git = "git diff " . g:signify_diff_base . "--no-color --no-ext-diff -U0 -- %f"
    let g:signify_vcs_cmds_diffmode.git = "git show " . g:signify_diff_base . ":./%f"
    echo "signify diff against " . g:signify_diff_base
endfunction
" toggle git gutter signs
nnoremap <leader>gst :SignifyToggle<CR>
"" force refresh of git gutter signs
nnoremap <leader>grf :SignifyRefresh<CR>
" go to next hunk of code that git diff thinks changed
nmap ]g <Plug>(signify-next-hunk)
nmap [g <Plug>(signify-prev-hunk)
"" git checkout hunk
nnoremap <leader>gu :SignifyHunkUndo<CR>


"""" BASE64: base64 encode/decode visual mode mappings
" base Sixty Four encode
vnoremap <silent> <leader>sf :<c-u>call base64#v_btoa()<cr>
" base Sixty Four decode
vnoremap<silent> <leader>fs :<c-u>call base64#v_atob()<cr>


""""""" plugin-related settings begin
" let vim detect filetype. needed for some plugins
filetype plugin on
" latex filetype setting
let g:tex_flavor = "latex"
""""""" plugin-related settings end

""""""" search settings begin
" this mapping causes vim to startup with c pressed
nnoremap <esc> <esc>:noh<cr>:<bs><esc>hl
" but neovim doesn't have this issue
""""""" search settings end

""""""" clipboard settings begin
" set <C-c> to copy-to-clipboard in visual mode
vnoremap <C-c> "+y
" ensure that clipboard = the unnamed register
set clipboard=unnamed
""""""" clipboard settings end

"""" <C-m> is 'm'y namespace
noremap <C-m>hls :set hlsearch!<CR>
noremap <C-m>rn :set relativenumber!<CR>
noremap <C-m>ln :set number!<CR>
" show hidden chars
noremap <C-m>hc :set list!<CR>
" turn off syntax highlighting
nmap <C-m>sn :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" reload file
nmap <C-m>rr :bufdo e<CR>
" remove trailing whitespace + tabs to spaces
function RemoveTrailingWhitespace_and_TabsToSpaces()
    :exe "silent! :%s/\\s\\+\\n/\\r/"
    :exe "silent! :%s/\\t/    /g"
endfunction
noremap <C-m>w :call RemoveTrailingWhitespace_and_TabsToSpaces()<CR>
"""" <C-m is 'm'y namespace

" allow opening buffers even if current has unsaved changes
set hidden

" tab settings
set tabstop=4     "The width of a TAB is set to 4, but is still \lt
set shiftwidth=4  "Indents will have a width of 4
set softtabstop=4 "Sets the number of columns for a TAB
set expandtab     "Expand TABs to spaces
" filetype-specific tab settings
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType javascriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 softtabstop=4
autocmd FileType typescriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=4
" except you can still manually TAB like this:
inoremap <C-Tab> <C-v><Tab>

" :split opens to the right or below
set splitright
set splitbelow

" let % jump to closing tag in html on top of usual functionality
runtime macros/matchit.vim

" code folding settings
set foldmethod=indent
set nofoldenable

" turn on mouse support
set mouse=a

" no ex-mode by accident
nnoremap Q <Nop>

" custom mappings must be typed in x milis
set timeoutlen=300


"""" MY VARIABLES: misc
let g:no_ocaml_maps=1
let g:csv_delim=','


"""" MY LEADER MAPPINGS: leader is space
" copy current filename into system clipboard
nnoremap <leader>% mz:put =expand('%:p')<CR>0v$h<C-c>dd`z
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qa!<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>W :wa<CR>
nnoremap <leader>z :wq<CR>
nnoremap <leader>Z :wqa<CR>
nnoremap <leader>x :bd<CR>
nnoremap <leader>X :bd!<CR>


"""" COC: intellisense and autocomplete
let g:coc_global_extensions = [
    \ "coc-ultisnips",
    \ "coc-tsserver",
    \ "coc-snippets",
    \ "coc-prettier",
    \ "coc-jedi",
    \ "coc-rust-analyzer",
    \ "coc-python",
    \ "coc-metals",
    \ "coc-json",
    \ "coc-emoji",
\ ]
let g:coc_user_config = {
    \ "languageserver": {
        \ "bash": {
            \ "command": "bash-language-server",
            \ "args": ["start"],
            \ "filetypes": ["sh"]
        \ }
    \ },
    \ "snippets.snipmate.enable": 0,
    \ "snippets.loadFromExtensions": 0,
    \ "coc.preferences.formatOnSaveFiletypes": [
        \ "bash", "python",
        \ "rust",
        \ "javascript", "javascriptreact", "typescriptreact","typescript", "json", "graphql"
    \ ],
    \ "python.linting.mypyEnabled": 1,
    \ "python.linting.flake8Enabled": 1,
    \ "python.formatting.provider": "black",
    \ "suggest.noselect": 0,
    \ "suggest.autoTrigger": "always",
    \ "suggest.triggerAfterInsertEnter": 1,
    \ "metals.scalafmtConfigPath": ".scalafmt.conf"
\ }

" TextEdit might fail if hidden is not set.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <expr> <CR> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [k <Plug>(coc-diagnostic-prev)
nmap <silent> ]k <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> <leader>kd <Plug>(coc-definition)
nmap <silent> <leader>kt <Plug>(coc-type-definition)
nmap <silent> <leader>ki <Plug>(coc-implementation)
nmap <silent> <leader>kv <Plug>(coc-references)

function! ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
nnoremap <leader>kh :call ShowDocumentation()<CR>
vmap <leader>kh :call ShowDocumentation()<CR>

" Highlight symbol under cursor and its references on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Remap for rename current word
nnoremap <leader>kr <Plug>(coc-rename)
vmap <leader>kr <Plug>(coc-rename)
" Remap for format selected region
xmap <leader>kf <Plug>(coc-format-selected)
nnoremap <leader>kf <Plug>(coc-format-selected)
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')
" force format of file
nnoremap <leader>kF :Format<CR>:OR<CR>
" expand decoration
nmap <leader>ke <Plug>(coc-metals-expand-decoration)

" Use <C-j> and <C-k> for trigger completion
inoremap <silent><expr> <C-j>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<C-j>" :
      \ coc#refresh()
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-h>"
